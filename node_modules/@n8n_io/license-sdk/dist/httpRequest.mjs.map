{"version":3,"sources":["../src/httpRequest.ts","../src/version.ts"],"sourcesContent":["import {\n  fetch,\n  getGlobalDispatcher,\n  setGlobalDispatcher,\n  Dispatcher,\n  ProxyAgent,\n} from 'undici'\n\nimport { URL } from 'node:url'\nimport { SDK_VERSION } from './version'\n\nfunction getProxyAgent(variableName: string) {\n  const proxyURI = process.env[variableName]\n  return proxyURI ? new ProxyAgent(proxyURI) : null\n}\n\nconst httpProxy =\n  getProxyAgent('http_proxy_license_server') || getProxyAgent('http_proxy')\nconst httpsProxy =\n  getProxyAgent('https_proxy_license_server') || getProxyAgent('https_proxy')\n\nconst proxyAgents = {\n  ...(httpProxy ? { 'http:': httpProxy } : {}),\n  ...(httpsProxy ? { 'https:': httpsProxy } : {}),\n}\n\nconst noProxyRules = (process.env['no_proxy'] ?? '')\n  .split(',')\n  .map((rule) => rule.trim())\n\nconst defaultDispatcher = getGlobalDispatcher()\n\nsetGlobalDispatcher(\n  new (class extends Dispatcher {\n    dispatch(options: any, handler: any) {\n      if (options.origin) {\n        const { host, protocol } =\n          typeof options.origin === 'string'\n            ? new URL(options.origin)\n            : options.origin\n        if (\n          !noProxyRules.some((rule) =>\n            rule.startsWith('.') ? host.endsWith(rule) : host === rule\n          )\n        ) {\n          const proxyAgent = proxyAgents[protocol as 'http:' | 'https:']\n          if (proxyAgent) {\n            proxyAgent.dispatch(options, handler)\n          }\n        }\n      }\n      return defaultDispatcher.dispatch(options, handler)\n    }\n  })()\n)\n\nexport async function postRequest<T>(\n  url: string,\n  data: {},\n  options: {\n    timeoutInMs?: number\n    productIdentifier?: string\n  } = {}\n) {\n  try {\n    const response = await fetch(url, {\n      method: 'post',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': `License-SDK/${SDK_VERSION} (Node.js ${process.version}; ${process.platform}) ${options.productIdentifier}`,\n      },\n      signal: AbortSignal.timeout(options.timeoutInMs ?? 30_000),\n    })\n\n    const responseJson = await response.json()\n\n    return {\n      status: response.status,\n      data: responseJson as T,\n    }\n  } catch (err) {\n    throw new Error('Connection Error', { cause: err })\n  }\n}\n\nexport default {\n  postRequest,\n}\n","// '2.19.0' is replaced before publishing to npm at .github/workflows/publish_sdk.yml\nexport const SDK_VERSION = '2.19.0'\n"],"mappings":"AAAA,OACE,SAAAA,EACA,uBAAAC,EACA,uBAAAC,EACA,cAAAC,EACA,cAAAC,MACK,SAEP,OAAS,OAAAC,MAAW,WCPb,IAAMC,EAAc,SDU3B,SAASC,EAAcC,EAAsB,CAC3C,IAAMC,EAAW,QAAQ,IAAID,CAAY,EACzC,OAAOC,EAAW,IAAIC,EAAWD,CAAQ,EAAI,IAC/C,CAEA,IAAME,EACJJ,EAAc,2BAA2B,GAAKA,EAAc,YAAY,EACpEK,EACJL,EAAc,4BAA4B,GAAKA,EAAc,aAAa,EAEtEM,EAAc,CAClB,GAAIF,EAAY,CAAE,QAASA,CAAU,EAAI,CAAC,EAC1C,GAAIC,EAAa,CAAE,SAAUA,CAAW,EAAI,CAAC,CAC/C,EAEME,GAAgB,QAAQ,IAAI,UAAe,IAC9C,MAAM,GAAG,EACT,IAAKC,GAASA,EAAK,KAAK,CAAC,EAEtBC,EAAoBC,EAAoB,EAE9CC,EACE,IAAK,cAAcC,CAAW,CAC5B,SAASC,EAAcC,EAAc,CACnC,GAAID,EAAQ,OAAQ,CAClB,GAAM,CAAE,KAAAE,EAAM,SAAAC,CAAS,EACrB,OAAOH,EAAQ,QAAW,SACtB,IAAII,EAAIJ,EAAQ,MAAM,EACtBA,EAAQ,OACd,GACE,CAACN,EAAa,KAAMC,GAClBA,EAAK,WAAW,GAAG,EAAIO,EAAK,SAASP,CAAI,EAAIO,IAASP,CACxD,EACA,CACA,IAAMU,EAAaZ,EAAYU,CAA8B,EACzDE,GACFA,EAAW,SAASL,EAASC,CAAO,CAExC,CACF,CACA,OAAOL,EAAkB,SAASI,EAASC,CAAO,CACpD,CACF,CACF,EAEA,eAAsBK,EACpBC,EACAC,EACAR,EAGI,CAAC,EACL,CACA,GAAI,CACF,IAAMS,EAAW,MAAMC,EAAMH,EAAK,CAChC,OAAQ,OACR,KAAM,KAAK,UAAUC,CAAI,EACzB,QAAS,CACP,eAAgB,mBAChB,aAAc,eAAeG,CAAW,aAAa,QAAQ,OAAO,KAAK,QAAQ,QAAQ,KAAKX,EAAQ,iBAAiB,EACzH,EACA,OAAQ,YAAY,QAAQA,EAAQ,aAAe,GAAM,CAC3D,CAAC,EAEKY,EAAe,MAAMH,EAAS,KAAK,EAEzC,MAAO,CACL,OAAQA,EAAS,OACjB,KAAMG,CACR,CACF,OAASC,EAAK,CACZ,MAAM,IAAI,MAAM,mBAAoB,CAAE,MAAOA,CAAI,CAAC,CACpD,CACF,CAEA,IAAOC,EAAQ,CACb,YAAAR,CACF","names":["fetch","getGlobalDispatcher","setGlobalDispatcher","Dispatcher","ProxyAgent","URL","SDK_VERSION","getProxyAgent","variableName","proxyURI","ProxyAgent","httpProxy","httpsProxy","proxyAgents","noProxyRules","rule","defaultDispatcher","getGlobalDispatcher","setGlobalDispatcher","Dispatcher","options","handler","host","protocol","URL","proxyAgent","postRequest","url","data","response","fetch","SDK_VERSION","responseJson","err","httpRequest_default"]}